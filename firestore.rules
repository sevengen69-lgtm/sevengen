/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user roles.
 * It avoids complex data validation to allow for rapid prototyping and schema iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only by the user themselves (owner-only).
 * - /quoteRequests/{quoteId}: Stores quote requests. Listable by all authenticated users, but create/update/delete operations are only permitted for users with the 'admin' role.
 *
 * Key Security Decisions:
 * - User listing is not allowed to protect user privacy.
 * - The 'admin' role is required for managing quote requests, providing a basic level of administrative control.
 *
 * Denormalization for Authorization:
 * - The User document contains a `role` field, which is used to determine administrative privileges. This avoids the need for separate role lookup queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) if the user's auth UID matches the {userId} and the action is performed by the signed-in user.
     * @allow (get) if the user's auth UID matches the {userId}.
     * @deny (list) Listing all users is not permitted.
     * @deny (create, update, delete) if the user's auth UID does not match the {userId}.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) ;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure quote requests. All users can read them, but only admins can manage (create, update, delete).
     * @path /quoteRequests/{quoteId}
     * @allow (list, get) All authenticated users can list and get quote requests.
     * @allow (create, update, delete) only users with the 'admin' role can create, update, or delete quote requests.
     * @deny (create, update, delete) if the user does not have the 'admin' role.
     * @principle Allows public read access with owner-only writes.
     */
    match /quoteRequests/{quoteId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the userId.
     * @param {string} userId The user ID to compare against request.auth.uid.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against request.auth.uid.
     * @return {boolean} True if the user is the owner and document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}