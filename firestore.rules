/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user roles and ownership.
 * It allows for rapid prototyping by relaxing data validation rules and focusing on authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the owner (the user themselves) and admins.
 * - /quoteRequests/{quoteId}: Stores quote requests. Allows public creation, but restricts modification and deletion to admins only.
 * - /homepageContent/{pageId}: Stores content for site pages. Only accessible to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information disclosure.
 * - Quote requests can be created by anyone (including unauthenticated users), but other operations are restricted.
 * - Data validation is minimized to allow for flexible data shapes during prototyping.
 * - The `isRegisteredUser` is not used to manage permissions at this time.  All users can create quote requests at this time.
 *
 * Denormalization for Authorization:
 * - For quote requests, the `userId` field is used to link the request to a user, allowing for ownership checks.
 *   If `userId` is null, it indicates that the request was submitted by an unauthenticated user.  However, the permission model allows any user to create a quote request.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is signed in and their UID matches the provided userId, false otherwise.
     * @example isOwner('someUserId') will return true if request.auth.uid == 'someUserId'.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the userId and resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is signed in, their UID matches the provided userId, and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines a user document.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own document (matching UID).
     * @allow (get, update, delete) - If the user is the owner of the document.
     * @deny (create) - If the user is trying to create a document with a different UID.
     * @deny (get, update, delete) - If the user is not the owner of the document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines a quote request document.
     * @path /quoteRequests/{quoteId}
     * @allow (create) - Anyone can create a quote request.
     * @allow (get, list) - Anyone can get or list a quote request.
     * @deny (update, delete) - Only admins can update or delete a quote request.  There are no admin roles defined, so writes are disabled.
     * @principle Allows public creation of quote requests but restricts modification and deletion.
     */
    match /quoteRequests/{quoteId} {
      allow get, list: if true;
      allow create: if true;
      allow update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Defines the homepage content document.
     * @path /homepageContent/{pageId}
     * @allow (get) - Anyone can read the homepage content.
     * @deny (create, update, delete, list) - Only admins can modify the homepage content. There are no admin roles defined, so writes are disabled.
     * @principle Restricts modification of homepage content to admins.
     */
    match /homepageContent/{pageId} {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false; // TODO: Add admin role check
    }
  }
}