/**
 * @file Firebase Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * read and write their own data, and no listing of users is allowed.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation.
 *
 * Key Security Decisions:
 * - Users cannot list other users.
 * - User creation is restricted to self-registration (UID must match).
 * - All write operations are validated against the authenticated user's ID.
 *
 * Denormalization for Authorization:
 *  The 'uid' is used to verify user ownership in the path `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123 if the 'uid' field in the data also equals 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete the profile at /users/user123.
     * @deny (list) - No one can list all users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own document, but enforce that the 'uid' field matches the document ID.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Allow a user to get their own document.
      allow get: if isOwner(userId);

      // Allow a user to update their own document. Enforce immutability of the `uid` field.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Allow a user to delete their own document.
      allow delete: if isExistingOwner(userId);

      // Prevent anyone from listing all users.
      allow list: if false;
    }
  }
}