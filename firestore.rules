/**
 * @file Firestore Security Rules
 * @description This ruleset implements a role-based access control model.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Access is restricted to the owner.
 * - /quoteRequests/{quoteId}: Stores quote requests. Read access is public, but write access is restricted to users with the "admin" role.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - All users can list quote requests, but only admins can create, update, or delete them.
 * - Data validation is relaxed to facilitate rapid prototyping, except for authorization-critical fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (read, write) A user with UID "user123" can read and write their own profile at /users/user123.
     * @deny (read, write) A user with UID "user123" cannot read or write the profile at /users/anotherUser.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants public read access to quote requests and restricts write access to admins.
     * @path /quoteRequests/{quoteId}
     * @allow (read) Any user can read a quote request.
     * @allow (create, update, delete) Only a user with the "admin" role can create, update, or delete quote requests.
     * @deny (create, update, delete) A user without the "admin" role cannot create, update, or delete quote requests.
     * @principle Restricts write access based on user role.
     */
    match /quoteRequests/{quoteId} {
      function isAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}