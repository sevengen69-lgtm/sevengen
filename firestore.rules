/**
 * @file Overview
 * This ruleset enforces a basic security model that allows public creation of quote requests
 * and restricts user data to only the owning user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /quoteRequests/{quoteId}: Stores quote requests, publicly creatable.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Quote requests are publicly creatable without authentication.
 * - Listing of users is disallowed for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.
     * @path /users/{userId}
     * @allow (read, write) if the user is the owner of the profile.
     * @deny (read, write) if the user is not the owner of the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Only allow authenticated users to read their own profile.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted.

      // Allow the user to create their own profile if the UID matches.
      allow create: if isSignedIn() && isOwner(userId);

      // Only allow the user to update their own profile.
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Only allow the user to delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allow public creation of quote requests.
     * @path /quoteRequests/{quoteId}
     * @allow (create) Anyone can create a quote request.
     * @allow (read) Anyone can read a quote request.
     *
     * @deny (update, delete) Only authenticated users can update or delete quote requests. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public access for quote requests while restricting updates.
     */
    match /quoteRequests/{quoteId} {
      // Anyone can read a quote request.
      allow get, list: if true;

      // Anyone can create a quote request.
      allow create: if true;

      // No Update/Delete allowed as per prototype request.
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the existing owner of the document.
  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}