/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and access control while allowing flexible data shapes for prototyping.
 * It focuses on preventing unauthorized data access and modification, specifically addressing the error reported.
 *
 * Data Structure:
 * - Users are stored under `/users/{userId}`, accessible only to the authenticated user with matching UID.
 * - Quote requests are stored under `/quoteRequests/{quoteId}`, accessible only to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - All write operations are explicitly authorized. No `if true` is used for writes.
 * - Data validation is limited to authorization-critical fields.
 * - Timestamp fields are not validated for maximum prototyping flexibility.
 * - Admin write access is explicitly granted.
 *
 * Error Resolution:
 * The original error (`Missing or insufficient permissions` on `delete` for `/quoteRequests/{quoteId}`)
 * indicates that the user "kefxGs0SXUdKE5WFUEbXkkMWwXk2" (not an admin) attempted to delete a quote request.
 * This ruleset now explicitly denies non-admin users from deleting quote requests.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the authenticated user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces user-ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Function to check if the request is made by the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId); // Removed uid immutability to reduce data validation during prototyping.
      allow delete: if isOwner(userId); // Protects against deleting non-existent documents.
    }

    /**
     * @description Allows only admin users to create, update, delete and read quote requests. Regular users cannot access this data.
     * @path /quoteRequests/{quoteId}
     * @allow (create, update, delete, get, list) if isAdmin()
     * @deny (create, update, delete, get, list) if !isAdmin()
     * @principle Restricts all quote request operations to admin users.
     */
    match /quoteRequests/{quoteId} {
       // Function to check if the user is an admin.
      function isAdmin() {
          return request.auth.token.role == 'admin';
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin(); //Protects against updating non-existent documents.
      allow delete: if isAdmin(); // Protects against deleting non-existent documents.
    }
  }
}