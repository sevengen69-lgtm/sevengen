/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-ownership and role-based access control, while adopting a flexible data validation approach to facilitate rapid prototyping.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles. Accessible only by the owner (the user with matching `uid`).
 * - `/quoteRequests/{quoteId}`: Stores quote requests. Accessible to admins for full CRUD operations.  Users can only create quote requests if the `userId` matches their `uid` or is null if `isRegisteredUser` is false.
 * - `/homepageContent/{pageId}`: Stores content for the homepage.  Read-only for all users. Write access restricted to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized access to user data.
 * - The `homepageContent` collection is publicly readable, but only admins can modify it.
 * - Unspecified relationships default to a strict no-access policy.
 *
 * Denormalization for Authorization:
 * To avoid costly `get()` operations, any data needed for authorization (e.g., ownership, roles) should be denormalized directly onto the documents being secured.  For example, quote requests include a `userId` field to link them to a user's profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an admin.
     * @return {bool} True if the user is an admin, false otherwise.
     *
     * This implementation assumes that the 'users' collection stores role information.
     * A more robust implementation might involve custom claims or a dedicated roles collection.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the current user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates their profile with matching userId.
     * @allow (get) - User with UID 'user123' reads their own profile.
     * @allow (update) - User with UID 'user123' updates their own profile.
     * @allow (delete) - User with UID 'user123' deletes their own profile.
     * @deny  (create) - User with UID 'user456' tries to create a profile for userId 'user123'.
     * @deny  (get) - User with UID 'user456' tries to read the profile of userId 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for quote requests.
     * @path /quoteRequests/{quoteId}
     * @allow (create) - User creates a quote request with their userId or no userId (if not logged in).
     * @allow (get) - Admin retrieves any quote request.
     * @allow (update) - Admin updates any quote request.
     * @allow (delete) - Admin deletes any quote request.
     * @deny  (create) - User attempts to create a quote request for another user.
     * @deny  (update) - Non-admin attempts to update a quote request.
     * @deny  (delete) - Non-admin attempts to delete a quote request.
     * @principle Enforces admin-only write access with user-owned create access.
     */
    match /quoteRequests/{quoteId} {
      allow get, list: if isAdmin();
      allow create: if (isSignedIn() && request.resource.data.userId == request.auth.uid)
                      || (!isSignedIn() && request.resource.data.isRegisteredUser == false);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for homepage content.
     * @path /homepageContent/{pageId}
     * @allow (get) - Any user can read homepage content.
     * @allow (update) - Only admins can update homepage content.
     * @deny  (create) - No one can create homepage content via the client (only via backend).
     * @deny  (delete) - No one can delete homepage content via the client (only via backend).
     * @principle Allows public read access with admin-only write access.
     */
    match /homepageContent/{pageId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }
  }
}